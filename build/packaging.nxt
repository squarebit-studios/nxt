{
    "version": "1.17",
    "alias": "packaging",
    "color": "#386b93",
    "mute": false,
    "solo": false,
    "meta_data": {
        "positions": {
            "/make_and_test_upload": [
                380.0,
                340.0
            ],
            "/make_and_upload": [
                400.0,
                100.0
            ],
            "/make_package": [
                380.0,
                -120.0
            ]
        }
    },
    "nodes": {
        "/": {
            "code": [
                "import os",
                "import sys",
                "import shutil"
            ]
        },
        "/make_and_test_upload": {
            "start_point": true,
            "instance": "/make_and_upload",
            "child_order": [
                "upload_package"
            ],
            "attrs": {
                "twine_token": {
                    "value": "${file::test_pypi_token}"
                }
            }
        },
        "/make_and_test_upload/upload_package": {
            "code": [
                "import subprocess",
                "orig_cwd = os.getcwd()",
                "os.chdir('${repo_root}')",
                "subprocess.check_call([sys.executable, '-m', 'twine' ,'upload', '--repository', 'testpypi', '${dest_dir}/*'])",
                "os.chdir(orig_cwd)"
            ]
        },
        "/make_and_upload": {
            "start_point": true,
            "instance": "/make_package",
            "child_order": [
                "pre_cleanup",
                "make_pip_package",
                "post_cleanup",
                "upload_package"
            ],
            "attrs": {
                "twine_token": {
                    "type": "raw",
                    "value": "${file::pypi_token}"
                }
            },
            "code": [
                "if 'TWINE_PASSWORD' not in os.environ:",
                "    with open('${twine_token}', 'r') as fp:",
                "        token_content = fp.read()",
                "    os.environ['TWINE_PASSWORD'] = token_content",
                "if 'TWINE_USERNAME' not in os.environ:",
                "    os.environ['TWINE_USERNAME'] = '__token__'"
            ]
        },
        "/make_and_upload/upload_package": {
            "code": [
                "import subprocess",
                "orig_cwd = os.getcwd()",
                "os.chdir('${repo_root}')",
                "subprocess.check_call([sys.executable, '-m', 'twine' ,'upload','${dest_dir}/*'])",
                "os.chdir(orig_cwd)"
            ]
        },
        "/make_package": {
            "start_point": true,
            "child_order": [
                "pre_cleanup",
                "make_pip_package",
                "post_cleanup"
            ],
            "attrs": {
                "dest_dir": {
                    "comment": "Directory to put the resulting package inside.",
                    "type": "raw",
                    "value": "${repo_root}/build/dist"
                },
                "package_name": {
                    "type": "raw",
                    "value": "nxt_core"
                },
                "repo_root": {
                    "comment": "Root directory of nxt repo.",
                    "type": "raw",
                    "value": "${path::..}"
                }
            }
        },
        "/make_package/make_pip_package": {
            "start_point": false,
            "code": [
                "import subprocess",
                "orig_cwd = os.getcwd()",
                "os.chdir('${repo_root}')",
                "subprocess.call([sys.executable, 'setup.py', 'sdist' ,'--formats', 'gztar', '--dist-dir', '${dest_dir}'])",
                "os.chdir(orig_cwd)"
            ]
        },
        "/make_package/post_cleanup": {
            "comment": "removes nxt.egg-info generated by previous step",
            "code": [
                "import shutil",
                "egg_info = os.path.join('${repo_root}', '${package_name}.egg-info')",
                "shutil.rmtree(egg_info)"
            ]
        },
        "/make_package/pre_cleanup": {
            "comment": "Deletes resources.py so it will be generated on installed machine.",
            "code": [
                "try:",
                "    shutil.rmtree('${dest_dir}')",
                "except OSError:",
                "    pass"
            ]
        }
    }
}